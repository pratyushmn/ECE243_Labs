
W:/ECE243/Lab6/Lab6/part2/part2.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	ea000013 	b	54 <JP2_IRQ>
   4:	ea00000d 	b	40 <__cs3_region_init_ram>
   8:	ea00000d 	b	44 <SERVICE_SVC>
   c:	ea00000e 	b	4c <FPGA_IRQ4>
  10:	ea00000c 	b	48 <INTERVAL_TIMER_IRQ>
  14:	00000000 	.word	0x00000000
  18:	ea00001c 	b	90 <SERVICE_IRQ>
  1c:	ea00000b 	b	50 <JTAG_IRQ>

Disassembly of section .text:

00000040 <__cs3_region_start_ram>:
/* Undefined instructions */
SERVICE_UND:                                
                    B   SERVICE_UND         
  40:	eafffffe 	b	40 <__cs3_region_start_ram>

00000044 <SERVICE_SVC>:
/* Software interrupts */
SERVICE_SVC:                                
                    B   SERVICE_SVC         
  44:	eafffffe 	b	44 <SERVICE_SVC>

00000048 <SERVICE_ABT_DATA>:
/* Aborted data reads */
SERVICE_ABT_DATA:                           
                    B   SERVICE_ABT_DATA    
  48:	eafffffe 	b	48 <SERVICE_ABT_DATA>

0000004c <SERVICE_ABT_INST>:
/* Aborted instruction fetch */
SERVICE_ABT_INST:                           
                    B   SERVICE_ABT_INST    
  4c:	eafffffe 	b	4c <SERVICE_ABT_INST>

00000050 <SERVICE_FIQ>:
                B        SERVICE_SVC         // software interrupt vector
                B        SERVICE_ABT_INST    // aborted prefetch vector
                B        SERVICE_ABT_DATA    // aborted data vector
                .word    0                   // unused vector
                B        SERVICE_IRQ         // IRQ interrupt vector
                B        SERVICE_FIQ         // FIQ interrupt vector
  50:	eafffffe 	b	50 <SERVICE_FIQ>

00000054 <_start>:
                .text    
                .global  _start 

_start:                                  
				/* Set up stack pointers for IRQ and SVC processor modes */
				MOV R1, #0b11010010
  54:	e3a010d2 	mov	r1, #210	; 0xd2
				MSR CPSR_c, R1 // change to IRQ mode with interrupts disabled
  58:	e121f001 	msr	CPSR_c, r1
				LDR SP, =0xFFFFFFFC // set IRQ stack to top of A9 on-chip memory
  5c:	e3e0d003 	mvn	sp, #3
			   
				MOV R1, #0b11010011
  60:	e3a010d3 	mov	r1, #211	; 0xd3
			    MSR CPSR_c, R1 // change to SVC mode with interrupts disabled
  64:	e121f001 	msr	CPSR_c, r1
				LDR SP, =0x3FFFFFFC // set SVC stack to top of DDR3 memory
  68:	e3e0d10f 	mvn	sp, #-1073741821	; 0xc0000003

                BL       CONFIG_GIC      // configure the ARM generic
  6c:	eb000034 	bl	144 <CONFIG_GIC>
                                         // interrupt controller

                BL       CONFIG_TIMER // configure the Interval Timer
  70:	eb00002b 	bl	124 <CONFIG_TIMER>
                BL       CONFIG_KEYS // configure the pushbutton KEYs port                        
  74:	eb000026 	bl	114 <CONFIG_KEYS>

				/* Enable IRQ interrupts in the processor */
				MOV R1, #0b01010011 // change bit 7 to zero so IRQ unmasked, Mode = SVC
  78:	e3a01053 	mov	r1, #83	; 0x53
				MSR CPSR_c, R1
  7c:	e121f001 	msr	CPSR_c, r1

				LDR R5, =0xFF200000 // LEDR base address
  80:	e59f5148 	ldr	r5, [pc, #328]	; 1d0 <RUN+0x4>

00000084 <LOOP>:

LOOP:                                    
                LDR      R3, COUNT 	// global variable
  84:	e59f313c 	ldr	r3, [pc, #316]	; 1c8 <COUNT>
                STR      R3, [R5]   // write to the LEDR lights
  88:	e5853000 	str	r3, [r5]
                B        LOOP
  8c:	eafffffc 	b	84 <LOOP>

00000090 <SERVICE_IRQ>:


/* Define the exception service routines */
SERVICE_IRQ:    
				PUSH     {R0-R7, LR}   
  90:	e92d40ff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}

				/* get the interrupt ID from the GIC*/  
                LDR      R4, =0xFFFEC100 // GIC CPU interface base address
  94:	e59f4138 	ldr	r4, [pc, #312]	; 1d4 <RUN+0x8>
                LDR      R5, [R4, #0x0C] // read the ICCIAR (Interrupt Acknowledgement Register) in the CPU
  98:	e594500c 	ldr	r5, [r4, #12]

0000009c <KEYS_CHECK>:
KEYS_CHECK:                       
                CMP      R5, #73         // check the interrupt ID (Keys)
  9c:	e3550049 	cmp	r5, #73	; 0x49
				BLEQ       KEY_ISR  
  a0:	0b000004 	bleq	b8 <KEY_ISR>

000000a4 <TIMER_CHECK>:
				
TIMER_CHECK:	
				CMP      R5, #72         // check the interrupt ID (Timer)    
  a4:	e3550048 	cmp	r5, #72	; 0x48
                BLEQ     TIMER_ISR                                   
  a8:	0b00000d 	bleq	e4 <TIMER_ISR>

000000ac <EXIT_IRQ>:

EXIT_IRQ:       
				STR      R5, [R4, #0x10] // write to End of Interrupt Register (ICCEOIR)
  ac:	e5845010 	str	r5, [r4, #16]
                POP      {R0-R7, LR}     
  b0:	e8bd40ff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
                SUBS     PC, LR, #4      // return from exception
  b4:	e25ef004 	subs	pc, lr, #4

000000b8 <KEY_ISR>:
				
				
KEY_ISR:	
		/* What to do when key press detected */
		PUSH     {R0-R7} 
  b8:	e92d00ff 	push	{r0, r1, r2, r3, r4, r5, r6, r7}
		LDR R0, =0xFF200050 // base address of KEYs
  bc:	e59f0114 	ldr	r0, [pc, #276]	; 1d8 <RUN+0xc>
		LDR R1, [R0, #0xC] // read edge capture register
  c0:	e590100c 	ldr	r1, [r0, #12]
		STR R1, [R0, #0xC] // clear the interrupt
  c4:	e580100c 	str	r1, [r0, #12]
		LDR R0, =RUN // increment variable
  c8:	e59f010c 	ldr	r0, [pc, #268]	; 1dc <RUN+0x10>
		LDR R1, [R0]
  cc:	e5901000 	ldr	r1, [r0]
		EOR R1, #1 // toggle the last bit in R0
  d0:	e2211001 	eor	r1, r1, #1
		STR R1, [R0]
  d4:	e5801000 	str	r1, [r0]
		B END_KEY_ISR
  d8:	eaffffff 	b	dc <END_KEY_ISR>

000000dc <END_KEY_ISR>:
			
END_KEY_ISR:
		POP     {R0-R7} 
  dc:	e8bd00ff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
		BX      LR // end interrupt
  e0:	e12fff1e 	bx	lr

000000e4 <TIMER_ISR>:

TIMER_ISR:
	/* What to do when timer goes past specified value */
	PUSH {R0-R7}
  e4:	e92d00ff 	push	{r0, r1, r2, r3, r4, r5, r6, r7}
	LDR R1, =0xFF202000 // interval timer base address
  e8:	e59f10f0 	ldr	r1, [pc, #240]	; 1e0 <RUN+0x14>
	MOVS R0, #0
  ec:	e3b00000 	movs	r0, #0
	STR R0, [R1] // clear the interrupt
  f0:	e5810000 	str	r0, [r1]
	LDR R0, =COUNT // get counter
  f4:	e59f00e8 	ldr	r0, [pc, #232]	; 1e4 <RUN+0x18>
	LDR R1, [R0]
  f8:	e5901000 	ldr	r1, [r0]
	LDR R2, RUN
  fc:	e59f20c8 	ldr	r2, [pc, #200]	; 1cc <RUN>
	ADD R1, R2 // increment counter by run value
 100:	e0811002 	add	r1, r1, r2
	STR R1, [R0]
 104:	e5801000 	str	r1, [r0]
	B END_TIMER_ISR
 108:	eaffffff 	b	10c <END_TIMER_ISR>

0000010c <END_TIMER_ISR>:

END_TIMER_ISR:
		POP     {R0-R7} 
 10c:	e8bd00ff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
		BX LR   // end interrupt
 110:	e12fff1e 	bx	lr

00000114 <CONFIG_KEYS>:

/* Configure the KEYs to generate interrupts */
CONFIG_KEYS:
				
				// write to the pushbutton port interrupt mask register
				LDR R0, =0xFF200050 // pushbutton key base address
 114:	e59f00bc 	ldr	r0, [pc, #188]	; 1d8 <RUN+0xc>
				MOV R1, #0xF // set interrupt mask bits
 118:	e3a0100f 	mov	r1, #15
				STR R1, [R0, #0x8] // interrupt mask register is (base + 8)
 11c:	e5801008 	str	r1, [r0, #8]
				BX LR
 120:	e12fff1e 	bx	lr

00000124 <CONFIG_TIMER>:

/* Configure the Interval Timer to generate interrupts*/
CONFIG_TIMER:
				LDR R0, =0xFF202000 		// Interval timer base address
 124:	e59f00b4 	ldr	r0, [pc, #180]	; 1e0 <RUN+0x14>
				LDR R1, =25000000			// 1/(100 MHz) Ã—(25000000) = 0.25s
 128:	e59f10b8 	ldr	r1, [pc, #184]	; 1e8 <__cs3_region_init_size_ram>
				STR R1, [R0, #0x8] 			// store the low half word of counter start value
 12c:	e5801008 	str	r1, [r0, #8]
				LSR R1, R1, #16
 130:	e1a01821 	lsr	r1, r1, #16
				STR R1, [R0, #0xC] 			// high half word of counter start value
 134:	e580100c 	str	r1, [r0, #12]

				// start the interval timer, enable its interrupts
				MOV R1, #0x7 				// START = 1, CONT = 1, ITO = 1
 138:	e3a01007 	mov	r1, #7
				STR R1, [R0, #0x4]
 13c:	e5801004 	str	r1, [r0, #4]
				BX LR
 140:	e12fff1e 	bx	lr

00000144 <CONFIG_GIC>:
/* 
 * Configure the Generic Interrupt Controller (GIC)
*/
				.global	CONFIG_GIC
CONFIG_GIC:
				PUSH		{LR}
 144:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    			/* Configure the A9 Private Timer interrupt, FPGA KEYs, and FPGA Timer
				/* CONFIG_INTERRUPT (int_ID (R0), CPU_target (R1)); */
				MOV		R0, #INTERVAL_TIMER_IRQ
 148:	e3a00048 	mov	r0, #72	; 0x48
    			MOV		R1, #CPU0
 14c:	e3a01001 	mov	r1, #1
    			BL			CONFIG_INTERRUPT
 150:	eb00000a 	bl	180 <CONFIG_INTERRUPT>
    			MOV		R0, #KEYS_IRQ
 154:	e3a00049 	mov	r0, #73	; 0x49
    			MOV		R1, #CPU0
 158:	e3a01001 	mov	r1, #1
    			BL			CONFIG_INTERRUPT
 15c:	eb000007 	bl	180 <CONFIG_INTERRUPT>

				/* configure the GIC CPU interface */
    			LDR		R0, =0xFFFEC100		// base address of CPU interface
 160:	e59f006c 	ldr	r0, [pc, #108]	; 1d4 <RUN+0x8>
    			/* Set Interrupt Priority Mask Register (ICCPMR) */
    			LDR		R1, =0xFFFF 			// enable interrupts of all priorities levels
 164:	e59f1080 	ldr	r1, [pc, #128]	; 1ec <__cs3_region_init_size_ram+0x4>
    			STR		R1, [R0, #0x04]
 168:	e5801004 	str	r1, [r0, #4]
    			/* Set the enable bit in the CPU Interface Control Register (ICCICR). This bit
				 * allows interrupts to be forwarded to the CPU(s) */
    			MOV		R1, #1
 16c:	e3a01001 	mov	r1, #1
    			STR		R1, [R0]
 170:	e5801000 	str	r1, [r0]
    
    			/* Set the enable bit in the Distributor Control Register (ICDDCR). This bit
				 * allows the distributor to forward interrupts to the CPU interface(s) */
    			LDR		R0, =0xFFFED000
 174:	e59f0074 	ldr	r0, [pc, #116]	; 1f0 <__cs3_region_init_size_ram+0x8>
    			STR		R1, [R0]    
 178:	e5801000 	str	r1, [r0]
    
    			POP     	{PC}
 17c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00000180 <CONFIG_INTERRUPT>:
 * other registers in the GIC
 * Arguments: R0 = interrupt ID, N
 *            R1 = CPU target
*/
CONFIG_INTERRUPT:
    			PUSH		{R4-R5, LR}
 180:	e92d4030 	push	{r4, r5, lr}
    
    			/* Configure Interrupt Set-Enable Registers (ICDISERn). 
				 * reg_offset = (integer_div(N / 32) * 4
				 * value = 1 << (N mod 32) */
    			LSR		R4, R0, #3							// calculate reg_offset
 184:	e1a041a0 	lsr	r4, r0, #3
    			BIC		R4, R4, #3							// R4 = reg_offset
 188:	e3c44003 	bic	r4, r4, #3
				LDR		R2, =0xFFFED100
 18c:	e59f2060 	ldr	r2, [pc, #96]	; 1f4 <__cs3_region_init_size_ram+0xc>
				ADD		R4, R2, R4							// R4 = address of ICDISER
 190:	e0824004 	add	r4, r2, r4
    
    			AND		R2, R0, #0x1F   					// N mod 32
 194:	e200201f 	and	r2, r0, #31
				MOV		R5, #1								// enable
 198:	e3a05001 	mov	r5, #1
    			LSL		R2, R5, R2							// R2 = value
 19c:	e1a02215 	lsl	r2, r5, r2

				/* now that we have the register address (R4) and value (R2), we need to set the
				 * correct bit in the GIC register */
    			LDR		R3, [R4]								// read current register value
 1a0:	e5943000 	ldr	r3, [r4]
    			ORR		R3, R3, R2							// set the enable bit
 1a4:	e1833002 	orr	r3, r3, r2
    			STR		R3, [R4]								// store the new register value
 1a8:	e5843000 	str	r3, [r4]

    			/* Configure Interrupt Processor Targets Register (ICDIPTRn)
     			 * reg_offset = integer_div(N / 4) * 4
     			 * index = N mod 4 */
    			BIC		R4, R0, #3							// R4 = reg_offset
 1ac:	e3c04003 	bic	r4, r0, #3
				LDR		R2, =0xFFFED800
 1b0:	e59f2040 	ldr	r2, [pc, #64]	; 1f8 <__cs3_region_init_size_ram+0x10>
				ADD		R4, R2, R4							// R4 = word address of ICDIPTR
 1b4:	e0824004 	add	r4, r2, r4
    			AND		R2, R0, #0x3						// N mod 4
 1b8:	e2002003 	and	r2, r0, #3
				ADD		R4, R2, R4							// R4 = byte address in ICDIPTR
 1bc:	e0824004 	add	r4, r2, r4

				/* now that we have the register address (R4) and value (R2), write to (only)
				 * the appropriate byte */
				STRB		R1, [R4]
 1c0:	e5c41000 	strb	r1, [r4]
    
    			POP		{R4-R5, PC}		
 1c4:	e8bd8030 	pop	{r4, r5, pc}

000001c8 <COUNT>:
 1c8:	00000000 	.word	0x00000000

000001cc <RUN>:
 1cc:	00000001 	.word	0x00000001
 1d0:	ff200000 	.word	0xff200000
 1d4:	fffec100 	.word	0xfffec100
 1d8:	ff200050 	.word	0xff200050
 1dc:	000001cc 	.word	0x000001cc
 1e0:	ff202000 	.word	0xff202000
 1e4:	000001c8 	.word	0x000001c8
 1e8:	017d7840 	.word	0x017d7840
 1ec:	0000ffff 	.word	0x0000ffff
 1f0:	fffed000 	.word	0xfffed000
 1f4:	fffed100 	.word	0xfffed100
 1f8:	fffed800 	.word	0xfffed800

000001fc <SERVICE_UND>:
/* Undefined instructions */
SERVICE_UND:                                
                    B   SERVICE_UND         
 1fc:	eafffffe 	b	1fc <SERVICE_UND>

00000200 <SERVICE_SVC>:
/* Software interrupts */
SERVICE_SVC:                                
                    B   SERVICE_SVC         
 200:	eafffffe 	b	200 <SERVICE_SVC>

00000204 <SERVICE_ABT_DATA>:
/* Aborted data reads */
SERVICE_ABT_DATA:                           
                    B   SERVICE_ABT_DATA    
 204:	eafffffe 	b	204 <SERVICE_ABT_DATA>

00000208 <SERVICE_ABT_INST>:
/* Aborted instruction fetch */
SERVICE_ABT_INST:                           
                    B   SERVICE_ABT_INST    
 208:	eafffffe 	b	208 <SERVICE_ABT_INST>

0000020c <SERVICE_FIQ>:
SERVICE_FIQ:                                
                    B   SERVICE_FIQ         
 20c:	eafffffe 	b	20c <SERVICE_FIQ>
