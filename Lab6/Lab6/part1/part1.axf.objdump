
W:/ECE243/Lab6/Lab6/part1/part1.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	ea000013 	b	54 <JP2_IRQ>
   4:	ea00000d 	b	40 <__cs3_region_init_ram>
   8:	ea00000d 	b	44 <SERVICE_SVC>
   c:	ea00000e 	b	4c <FPGA_IRQ4>
  10:	ea00000c 	b	48 <INTERVAL_TIMER_IRQ>
  14:	00000000 	.word	0x00000000
  18:	ea000018 	b	80 <SERVICE_IRQ>
  1c:	ea00000b 	b	50 <JTAG_IRQ>

Disassembly of section .text:

00000040 <__cs3_region_start_ram>:
/* Undefined instructions */
SERVICE_UND:                                
                    B   SERVICE_UND         
  40:	eafffffe 	b	40 <__cs3_region_start_ram>

00000044 <SERVICE_SVC>:
/* Software interrupts */
SERVICE_SVC:                                
                    B   SERVICE_SVC         
  44:	eafffffe 	b	44 <SERVICE_SVC>

00000048 <SERVICE_ABT_DATA>:
/* Aborted data reads */
SERVICE_ABT_DATA:                           
                    B   SERVICE_ABT_DATA    
  48:	eafffffe 	b	48 <SERVICE_ABT_DATA>

0000004c <SERVICE_ABT_INST>:
/* Aborted instruction fetch */
SERVICE_ABT_INST:                           
                    B   SERVICE_ABT_INST    
  4c:	eafffffe 	b	4c <SERVICE_ABT_INST>

00000050 <SERVICE_FIQ>:
                B        SERVICE_SVC         // software interrupt vector
                B        SERVICE_ABT_INST    // aborted prefetch vector
                B        SERVICE_ABT_DATA    // aborted data vector
                .word    0                   // unused vector
                B        SERVICE_IRQ         // IRQ interrupt vector
                B        SERVICE_FIQ         // FIQ interrupt vector
  50:	eafffffe 	b	50 <SERVICE_FIQ>

00000054 <_start>:
                .global  _start 

_start:                                  
				/* Set up stack pointers for IRQ and SVC processor modes */

				MOV R1, #0b11010010
  54:	e3a010d2 	mov	r1, #210	; 0xd2
				MSR CPSR_c, R1 // change to IRQ mode with interrupts disabled
  58:	e121f001 	msr	CPSR_c, r1
				LDR SP, =0xFFFFFFFC // set IRQ stack to top of A9 on-chip memory
  5c:	e3e0d003 	mvn	sp, #3
			   
				MOV R1, #0b11010011
  60:	e3a010d3 	mov	r1, #211	; 0xd3
			    MSR CPSR_c, R1 // change to SVC mode with interrupts disabled
  64:	e121f001 	msr	CPSR_c, r1
				LDR SP, =0x3FFFFFFC // set SVC stack to top of DDR3 memory
  68:	e3e0d10f 	mvn	sp, #-1073741821	; 0xc0000003

                BL       CONFIG_GIC      // configure the ARM generic
  6c:	eb00003d 	bl	168 <CONFIG_GIC>
                                         // interrupt controller

                BL CONFIG_KEYS // configure the KEYS for interrupts                         
  70:	eb000037 	bl	154 <CONFIG_KEYS>

				/* Enable IRQ interrupts in the processor */
				MOV R1, #0b01010011 // change bit 7 to zero so IRQ unmasked, MODE = SVC
  74:	e3a01053 	mov	r1, #83	; 0x53
				MSR CPSR_c, R1
  78:	e121f001 	msr	CPSR_c, r1

0000007c <LOOP>:

LOOP:                                    
                B        LOOP            // main program does nothing except wait for exception
  7c:	eafffffe 	b	7c <LOOP>

00000080 <SERVICE_IRQ>:

/* Define the exception service routines */

SERVICE_IRQ:    
				PUSH     {R0-R7, LR}   
  80:	e92d40ff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}

				/* get the interrupt ID from the GIC*/  
                LDR      R4, =0xFFFEC100 // GIC CPU interface base address
  84:	e59f415c 	ldr	r4, [pc, #348]	; 1e8 <BLANK+0x4>
                LDR      R5, [R4, #0x0C] // read the ICCIAR (Interrupt Acknowledgement Register) in the CPU
  88:	e594500c 	ldr	r5, [r4, #12]

0000008c <KEYS_CHECK>:
                                         

KEYS_CHECK:                       
                CMP      R5, #73         // check the interrupt ID
  8c:	e3550049 	cmp	r5, #73	; 0x49

00000090 <UNEXPECTED>:

UNEXPECTED:     
				BNE      UNEXPECTED      // if not recognized, stop here
  90:	1afffffe 	bne	90 <UNEXPECTED>
                BL       KEY_ISR         
  94:	eb000002 	bl	a4 <KEY_ISR>

00000098 <EXIT_IRQ>:

EXIT_IRQ:       
				STR      R5, [R4, #0x10] // write to the End of Interrupt
  98:	e5845010 	str	r5, [r4, #16]
                                         // Register (ICCEOIR)
                POP      {R0-R7, LR}     
  9c:	e8bd40ff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
                SUBS     PC, LR, #4      // return from exception
  a0:	e25ef004 	subs	pc, lr, #4

000000a4 <KEY_ISR>:
				
				
KEY_ISR:	

		/* Used to describe what happens when key press detected */
		PUSH     {R0-R11} 
  a4:	e92d0fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11}
		LDR R0, =0xFF200050 // base address of KEYs
  a8:	e59f013c 	ldr	r0, [pc, #316]	; 1ec <BLANK+0x8>
		LDR R1, [R0, #0xC] // read edge capture register
  ac:	e590100c 	ldr	r1, [r0, #12]
		STR R1, [R0, #0xC] // clear the interrupt
  b0:	e580100c 	str	r1, [r0, #12]
		LDR R2 , =0xFF200020 //base address for HEX
  b4:	e59f2134 	ldr	r2, [pc, #308]	; 1f0 <__cs3_region_init_size_ram>
		LDR R7, =HEX	//Hex values for 0-3
  b8:	e59f7134 	ldr	r7, [pc, #308]	; 1f4 <__cs3_region_init_size_ram+0x4>

000000bc <CHECK_KEY0>:

		
CHECK_KEY0:

		MOVS R3, #0x1
  bc:	e3b03001 	movs	r3, #1
		ANDS R3, R1    // check for KEY0
  c0:	e0133001 	ands	r3, r3, r1
		BEQ CHECK_KEY1 // jumps to next check subroutine if the and instruction gives 0 (ie. the first bit in R1 did not equal 1)
  c4:	0a000005 	beq	e0 <CHECK_KEY1>
		LDRB R5,[R7]   // R5 contains HEX value for 0
  c8:	e5d75000 	ldrb	r5, [r7]
		LDRB R4,[R2]   // loads current data from HEX0
  cc:	e5d24000 	ldrb	r4, [r2]
		CMP R5,R4 	   // check to see if it is currently displaying 0
  d0:	e1550004 	cmp	r5, r4
		LDREQ R5,BLANK // if it is, then load blank
  d4:	059f5108 	ldreq	r5, [pc, #264]	; 1e4 <BLANK>
		STRB R5, [R2]  // display 0/blank on HEX0 based on above check
  d8:	e5c25000 	strb	r5, [r2]
		B END_KEY_ISR
  dc:	ea00001a 	b	14c <END_KEY_ISR>

000000e0 <CHECK_KEY1>:
		
CHECK_KEY1:

		MOVS R3, #0x2
  e0:	e3b03002 	movs	r3, #2
		ANDS R3, R1		// check for KEY1
  e4:	e0133001 	ands	r3, r3, r1
		BEQ CHECK_KEY2
  e8:	0a000005 	beq	104 <CHECK_KEY2>
		LDRB R5,[R7,#1]
  ec:	e5d75001 	ldrb	r5, [r7, #1]
		LDRB R4,[R2,#1] // loads current data from HEX1
  f0:	e5d24001 	ldrb	r4, [r2, #1]
		CMP R5,R4
  f4:	e1550004 	cmp	r5, r4
		LDREQ R5,BLANK
  f8:	059f50e4 	ldreq	r5, [pc, #228]	; 1e4 <BLANK>
		STRB R5, [R2,#1] // display 1/blank on HEX1 based on above check
  fc:	e5c25001 	strb	r5, [r2, #1]
		B END_KEY_ISR
 100:	ea000011 	b	14c <END_KEY_ISR>

00000104 <CHECK_KEY2>:
		
CHECK_KEY2:

		MOVS R3, #0x4
 104:	e3b03004 	movs	r3, #4
		ANDS R3, R1		// check for KEY2
 108:	e0133001 	ands	r3, r3, r1
		BEQ CHECK_KEY3
 10c:	0a000005 	beq	128 <CHECK_KEY3>
		LDRB R5,[R7,#2]
 110:	e5d75002 	ldrb	r5, [r7, #2]
		LDRB R4,[R2,#2] // loads current data from HEX2
 114:	e5d24002 	ldrb	r4, [r2, #2]
		CMP R5,R4
 118:	e1550004 	cmp	r5, r4
		LDREQ R5,BLANK
 11c:	059f50c0 	ldreq	r5, [pc, #192]	; 1e4 <BLANK>
		STRB R5, [R2,#2] // display 2/blank on HEX2 based on above check
 120:	e5c25002 	strb	r5, [r2, #2]
		B END_KEY_ISR
 124:	ea000008 	b	14c <END_KEY_ISR>

00000128 <CHECK_KEY3>:
		
CHECK_KEY3:

		MOVS R3, #0x8
 128:	e3b03008 	movs	r3, #8
		ANDS R3, R1		// check for KEY3
 12c:	e0133001 	ands	r3, r3, r1
		BEQ END_KEY_ISR
 130:	0a000005 	beq	14c <END_KEY_ISR>
		LDRB R5,[R7,#3]
 134:	e5d75003 	ldrb	r5, [r7, #3]
		LDRB R4,[R2,#3] // loads current data from HEX3
 138:	e5d24003 	ldrb	r4, [r2, #3]
		CMP R5,R4
 13c:	e1550004 	cmp	r5, r4
		LDREQ R5,BLANK
 140:	059f509c 	ldreq	r5, [pc, #156]	; 1e4 <BLANK>
		STRB R5, [R2,#3] // display 3/blank on HEX3 based on above check
 144:	e5c25003 	strb	r5, [r2, #3]
		B END_KEY_ISR
 148:	eaffffff 	b	14c <END_KEY_ISR>

0000014c <END_KEY_ISR>:
		
END_KEY_ISR:
		POP     {R0-R11} 
 14c:	e8bd0fff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11}
		BX LR
 150:	e12fff1e 	bx	lr

00000154 <CONFIG_KEYS>:

/* Configure the KEYs to generate interrupts */
CONFIG_KEYS:
				PUSH {LR}
 154:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
				// write to the pushbutton port interrupt mask register
				LDR R0, =0xFF200050 // pushbutton key base address
 158:	e59f008c 	ldr	r0, [pc, #140]	; 1ec <BLANK+0x8>
				MOV R1, #0xF // set interrupt mask bits
 15c:	e3a0100f 	mov	r1, #15
				STR R1, [R0, #0x8] // interrupt mask register is (base + 8)
 160:	e5801008 	str	r1, [r0, #8]
				POP {PC}
 164:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00000168 <CONFIG_GIC>:
/* 
 * Configure the Generic Interrupt Controller (GIC)
*/
				.global	CONFIG_GIC
CONFIG_GIC:
				PUSH		{LR}
 168:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    			/* Configure the A9 Private Timer interrupt, FPGA KEYs, and FPGA Timer
				/* CONFIG_INTERRUPT (int_ID (R0), CPU_target (R1)); */
    			MOV		R0, #KEYS_IRQ
 16c:	e3a00049 	mov	r0, #73	; 0x49
    			MOV		R1, #CPU0
 170:	e3a01001 	mov	r1, #1
    			BL			CONFIG_INTERRUPT
 174:	eb000007 	bl	198 <CONFIG_INTERRUPT>

				/* configure the GIC CPU interface */
    			LDR		R0, =0xFFFEC100		// base address of CPU interface
 178:	e59f0068 	ldr	r0, [pc, #104]	; 1e8 <BLANK+0x4>
    			/* Set Interrupt Priority Mask Register (ICCPMR) */
    			LDR		R1, =0xFFFF 			// enable interrupts of all priorities levels
 17c:	e59f1074 	ldr	r1, [pc, #116]	; 1f8 <__cs3_region_init_size_ram+0x8>
    			STR		R1, [R0, #0x04]
 180:	e5801004 	str	r1, [r0, #4]
    			/* Set the enable bit in the CPU Interface Control Register (ICCICR). This bit
				 * allows interrupts to be forwarded to the CPU(s) */
    			MOV		R1, #1
 184:	e3a01001 	mov	r1, #1
    			STR		R1, [R0]
 188:	e5801000 	str	r1, [r0]
    
    			/* Set the enable bit in the Distributor Control Register (ICDDCR). This bit
				 * allows the distributor to forward interrupts to the CPU interface(s) */
    			LDR		R0, =0xFFFED000
 18c:	e59f0068 	ldr	r0, [pc, #104]	; 1fc <__cs3_region_init_size_ram+0xc>
    			STR		R1, [R0]    
 190:	e5801000 	str	r1, [r0]
    
    			POP     	{PC}
 194:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00000198 <CONFIG_INTERRUPT>:
 * other registers in the GIC
 * Arguments: R0 = interrupt ID, N
 *            R1 = CPU target
*/
CONFIG_INTERRUPT:
    			PUSH		{R4-R5, LR}
 198:	e92d4030 	push	{r4, r5, lr}
    
    			/* Configure Interrupt Set-Enable Registers (ICDISERn). 
				 * reg_offset = (integer_div(N / 32) * 4
				 * value = 1 << (N mod 32) */
    			LSR		R4, R0, #3							// calculate reg_offset
 19c:	e1a041a0 	lsr	r4, r0, #3
    			BIC		R4, R4, #3							// R4 = reg_offset
 1a0:	e3c44003 	bic	r4, r4, #3
				LDR		R2, =0xFFFED100
 1a4:	e59f2054 	ldr	r2, [pc, #84]	; 200 <__cs3_region_init_size_ram+0x10>
				ADD		R4, R2, R4							// R4 = address of ICDISER
 1a8:	e0824004 	add	r4, r2, r4
    
    			AND		R2, R0, #0x1F   					// N mod 32
 1ac:	e200201f 	and	r2, r0, #31
				MOV		R5, #1								// enable
 1b0:	e3a05001 	mov	r5, #1
    			LSL		R2, R5, R2							// R2 = value
 1b4:	e1a02215 	lsl	r2, r5, r2

				/* now that we have the register address (R4) and value (R2), we need to set the
				 * correct bit in the GIC register */
    			LDR		R3, [R4]								// read current register value
 1b8:	e5943000 	ldr	r3, [r4]
    			ORR		R3, R3, R2							// set the enable bit
 1bc:	e1833002 	orr	r3, r3, r2
    			STR		R3, [R4]								// store the new register value
 1c0:	e5843000 	str	r3, [r4]

    			/* Configure Interrupt Processor Targets Register (ICDIPTRn)
     			 * reg_offset = integer_div(N / 4) * 4
     			 * index = N mod 4 */
    			BIC		R4, R0, #3							// R4 = reg_offset
 1c4:	e3c04003 	bic	r4, r0, #3
				LDR		R2, =0xFFFED800
 1c8:	e59f2034 	ldr	r2, [pc, #52]	; 204 <__cs3_region_init_size_ram+0x14>
				ADD		R4, R2, R4							// R4 = word address of ICDIPTR
 1cc:	e0824004 	add	r4, r2, r4
    			AND		R2, R0, #0x3						// N mod 4
 1d0:	e2002003 	and	r2, r0, #3
				ADD		R4, R2, R4							// R4 = byte address in ICDIPTR
 1d4:	e0824004 	add	r4, r2, r4

				/* now that we have the register address (R4) and value (R2), write to (only)
				 * the appropriate byte */
				STRB		R1, [R4]
 1d8:	e5c41000 	strb	r1, [r4]
    
    			POP		{R4-R5, PC}
 1dc:	e8bd8030 	pop	{r4, r5, pc}

000001e0 <HEX>:
 1e0:	4f5b063f 	.word	0x4f5b063f

000001e4 <BLANK>:
 1e4:	00000000 	.word	0x00000000
 1e8:	fffec100 	.word	0xfffec100
 1ec:	ff200050 	.word	0xff200050
 1f0:	ff200020 	.word	0xff200020
 1f4:	000001e0 	.word	0x000001e0
 1f8:	0000ffff 	.word	0x0000ffff
 1fc:	fffed000 	.word	0xfffed000
 200:	fffed100 	.word	0xfffed100
 204:	fffed800 	.word	0xfffed800

00000208 <SERVICE_UND>:
/* Undefined instructions */
SERVICE_UND:                                
                    B   SERVICE_UND         
 208:	eafffffe 	b	208 <SERVICE_UND>

0000020c <SERVICE_SVC>:
/* Software interrupts */
SERVICE_SVC:                                
                    B   SERVICE_SVC         
 20c:	eafffffe 	b	20c <SERVICE_SVC>

00000210 <SERVICE_ABT_DATA>:
/* Aborted data reads */
SERVICE_ABT_DATA:                           
                    B   SERVICE_ABT_DATA    
 210:	eafffffe 	b	210 <SERVICE_ABT_DATA>

00000214 <SERVICE_ABT_INST>:
/* Aborted instruction fetch */
SERVICE_ABT_INST:                           
                    B   SERVICE_ABT_INST    
 214:	eafffffe 	b	214 <SERVICE_ABT_INST>

00000218 <SERVICE_FIQ>:
SERVICE_FIQ:                                
                    B   SERVICE_FIQ         
 218:	eafffffe 	b	218 <SERVICE_FIQ>
